// Helper functions used in other files

class Misc {
    constructor() {
        this.commands = [

        ];
    }

    sleep = (seconds) => 
        new Promise(resolve => setTimeout(resolve, seconds*1000))

    // Function to deverify members when they leave the server or when !d is used
    deverifyFunc = async(mid) => {
        const mongoose = require('mongoose')
        const {verified} = require('./models')

        mongoose.connect('mongodb://localhost:27017/pesu',
        {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });

        const ret = await verified.findOneAndDelete({ID: mid})
        if(ret === null) {
            return false
        }
        else {
            return true
        }
    }

    // Test to check if message was regenerated by NQN
    // Returns false if no NQN message was regenerated
    nqnTest = async(message) => {
        let ret = false;
        const config = require("../../config.json")

        // Get NQN Audit Logs channel
        const nqnLogs = message.guild.channels.cache.get(config.nqnlogs)
        const lastMessage = nqnLogs.lastMessage // Latest message in the logs
        const author = lastMessage.author.username // NQN logs have username like this: `NQN on behalf of han (723377619420184668)`
        const openBracket = author.indexOf("(")
        const authorId = author.substring(openBracket+1, author.length-1) // Get the author ID, the number inside the brackets

        // User messages and NQN replaced messages have different message content
        // User message may look like `:sadsmile: no`
        // NQN replaced message will look like `<a:sadsmile:47856286545764578> no`
        // So it is necessary to clean out special characters, numbers and any other characters necessary for message content comparison
        const cleanedCont = message.content.replaceAll("<:", "").replaceAll("<a:", "").replaceAll(">", "").replaceAll(" ", "").replaceAll(/\d+/g, "").replaceAll(":", "").trim().toLowerCase()
        const cleanedLast = lastMessage.content.replaceAll("<:", "").replaceAll("<a:", "").replaceAll(">", "").replaceAll(" ", "").replaceAll(/\d+/g, "").replaceAll(":", "").trim().toLowerCase()
        
        if(cleanedCont === cleanedLast && message.author.id === authorId){
            ret = true;
            // A buffer message is sent to the logs channel so that the last message for the next deleted message in case it's not
            // nqn generated does not refer to an older deleted message
            await nqnLogs.send("buffer");
        }
        return ret;

    }

    // Function to run shell scripts in a promisified way
    shell = (cmd) => {   
        const { exec } = require('child_process')
        return new Promise((resolve, reject) => {
            cmd = cmd.replace(/\n/g, " && ")
            exec(
                cmd,
                (error, stdout, stderr) => {
                    if(error) throw error
                    resolve(stdout? stdout : stderr)
                })  
        })

    }

    // This function is used to register slash commands and context menu commands to discord
    // through the discord API. This function can be called in any other common function
    // and commands need to be registered only once
    interactionsRegister = async() => {
        const {REST} = require('@discordjs/rest')
        const {Routes} = require('discord-api-types/v9')
        const {SlashCommandBuilder, ContextMenuCommandBuilder} = require('@discordjs/builders')
        const token = process.env.TOKEN;
        const clienId = "749484661717204992"
        const guildId = "742797665301168220"

        let interList = [] // List of interaction builders
        
        const pride = new SlashCommandBuilder()
            .setName('pride')
            .setDescription('Flourishes you with the pride of PESU')
            .addStringOption(option => 
                option.setName('link')
                    .setDescription('The message link to reply with the pride to')
                    .setRequired(false));
        interList.push(pride)
        
        const changenick = new SlashCommandBuilder()
            .setName('changenick')
            .setDescription('Change someone else\'s nickname')
            .addUserOption(option => 
                option.setName('member')
                .setDescription('The member who\'s name you want to change')
                .setRequired(true))
            .addStringOption(option => 
                option.setName('new_nick')
                .setDescription('The new nickname you wanna give this user')
                .setRequired(true));
        interList.push(changenick);
        
        const anon = new SlashCommandBuilder()
            .setName('anon')
            .setDescription('Send messages anonymously to the general lobby channel')
            .addStringOption(option => 
                option.setName('message')
                .setDescription('The message you want to send')
                .setRequired(true))
            .addStringOption(option => 
                option.setName('link')
                .setDescription('Message link you want to reply to')
                .setRequired(false));
        interList.push(anon);

        const bananon = new SlashCommandBuilder()
            .setName('bananon')
            .setDescription('Ban a user from using anon based on message link')
            .addStringOption(option => 
                option.setName('link')
                .setDescription('The message link you want to use to ban')
                .setRequired(true))
            .addStringOption(option => 
                option.setName('reason')
                .setDescription('Reason for ban')
                .setRequired(false));
        interList.push(bananon)

        const bananoncontext = new ContextMenuCommandBuilder()
            .setName('Ban this anon')
            .setType(3)
        interList.push(bananoncontext)

        const userbananon = new SlashCommandBuilder()
            .setName('banuseranon')
            .setDescription('Ban a user from using anon messaging feature')
            .addUserOption(option => 
                option.setName('member')
                .setDescription('The member who you wanna ban')
                .setRequired(true))
            .addStringOption(option => 
                option.setName('reason')
                .setDescription('Reason for banning')
                .setRequired(false));
        interList.push(userbananon);

        const userunbananon = new SlashCommandBuilder()
            .setName('userunbananon')
            .setDescription('Unban a user from using anon messaging')
            .addUserOption(option => 
                option.setName('member')
                .setDescription('The member you wanna unban')
                .setRequired(true));
        interList.push(userunbananon)
        
        // Registration process
        const rest = new REST({version: '9'}).setToken(token)
        try {
            console.log("Started...")
            const res = await rest.put(
                Routes.applicationGuildCommands(clienId, guildId),
                {body: interList}
            );
            console.log(res)
            console.log("Success")
        } catch (error) {
            console.log(error)
        }
    }
}
const misc = new Misc()

module.exports = misc